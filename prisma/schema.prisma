// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  last_login    DateTime?
  email         String    @unique
  first_name    String?
  last_name     String?
  phone_number  String?
  date_of_birth DateTime?
  password_hash String
  is_active     Boolean   @default(true)
  is_admin      Boolean   @default(false)
  access_token  String?
  refresh_token String?

  agency_id               Int?
  agency                  Agency?        @relation(fields: [agency_id], references: [id])
  orders                  Order[]
  roles                   UserRole[]
  order_histories         OrderHistory[]
  order_histories_changed OrderHistory[] @relation("OrderHistoryChangedBy")

  @@map("users")
}

model Agency {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  name        String
  description String?
  users       User[]

  @@map("agencies")
}

model UserRole {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  role_id Int
  role    Role @relation(fields: [role_id], references: [id])

  @@id([user_id, role_id])
  @@map("user_roles")
}

model Role {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  name        RoleName @unique
  description String?

  users            UserRole[]
  role_permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  name        String   @unique
  description String?

  role_permissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  role_id Int
  role    Role @relation(fields: [role_id], references: [id])

  permission_id Int
  permission    Permission @relation(fields: [permission_id], references: [id])

  @@id([role_id, permission_id])
  @@map("role_permissions")
}

model Order {
  id           Int       @id @default(autoincrement())
  order_number String    @unique
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  confirmed_at DateTime?
  paid_at      DateTime?
  cancelled_at DateTime?
  completed_at DateTime?

  order_status    OrderStatus        @default(PENDING)
  email_status    NotificationStatus
  telegram_status NotificationStatus
  payment_status  PaymentStatus      @default(UNPAID)
  payment_method  PaymentMethod?

  cancellation_reason String?
  comments            String?

  paid_amount     Decimal   @default(0)
  discount_amount Decimal
  currency        Currency  @default(EUR)
  due_date        DateTime?

  total_base_price    Decimal
  total_current_price Decimal

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  promo_code_id String?
  promo_code    PromoCode? @relation(fields: [promo_code_id], references: [code])

  order_items     OrderItem[]
  payments        Payment[]
  order_histories OrderHistory[]

  @@index([order_status])
  @@index([payment_status])
  @@index([user_id])
  @@map("orders")
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  service_id    String
  service_type  ServiceType
  service_title String
  date          DateTime
  time          String
  slug          String?
  image_src     String?
  image_lqip    String?

  total_base_price    Decimal
  total_current_price Decimal

  service_prices OrderItemPrice[]

  provider_name String?
  provider_id   Int?

  order_id Int
  order    Order @relation(fields: [order_id], references: [id])

  @@map("order_items")
}

model OrderHistory {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  order_id   Int
  order      Order    @relation(fields: [order_id], references: [id])

  status          OrderStatus
  changed_at      DateTime    @default(now())
  changed_by      Int
  changed_by_user User        @relation("OrderHistoryChangedBy", fields: [changed_by], references: [id])
  User            User?       @relation(fields: [userId], references: [id])
  userId          Int?

  @@map("order_histories")
}

model OrderItemPrice {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  price_type     String
  base_price     Decimal
  current_price  Decimal
  quantity       Int
  category_title String

  total_base_price    Decimal
  total_current_price Decimal

  order_item_id Int
  order_item    OrderItem @relation(fields: [order_item_id], references: [id])

  @@map("order_item_prices")
}

model Payment {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  order_id   Int
  order      Order    @relation(fields: [order_id], references: [id])

  amount         Decimal
  method         PaymentMethod
  status         PaymentStatus @default(UNPAID)
  transaction_id String?
  paid_at        DateTime?

  @@map("payments")
}

model PromoCode {
  code       String   @id
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  discount   Decimal
  expires_at DateTime
  is_active  Boolean  @default(true)
  orders     Order[]

  @@map("promo_codes")
}

enum RoleName {
  ADMIN
  USER
  GUEST
  AGENCY_USER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum NotificationStatus {
  NOT_SENT
  SENT
  FAILED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  INSTALLMENT_PAYMENT
}

enum Currency {
  USD
  EUR
  GBP
  RUB
}

enum ServiceType {
  TOUR
  TRANSFER
  EXCURSION
}
