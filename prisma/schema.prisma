// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  email      String   @unique
  name       String?
  password   String
  is_active  Boolean  @default(true)
  orders     Order[]

  role_id Int
  role    Role @relation(fields: [role_id], references: [id])

  @@map("users")
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  description    String?
  user           User[]
  RolePermission RolePermission[]

  @@map("roles")
}

model Permission {
  id               Int              @id @default(autoincrement())
  name             String           @unique
  description      String?
  role_permissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id Int @id @default(autoincrement())

  role_id Int
  role    Role @relation(fields: [role_id], references: [id])

  permission_id Int
  permission    Permission @relation(fields: [permission_id], references: [id])

  @@map("role_permissions")
}

model Order {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  order_status       OrderStatus        @default(PENDING)
  email_status       NotificationStatus
  telegram_status    NotificationStatus
  payment_status     PaymentStatus
  payment_method     PaymentMethod
  promo_code         String?
  order_reservations OrderReservation[]

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  @@map("orders")
}

model OrderReservation {
  id                 Int                @id @default(autoincrement())
  reservation_id     String
  reservation_type   String
  reservation_title  String             @default("Unknown Title")
  date               DateTime
  time               String
  slug               String?
  image_src          String?
  image_lqip         String?
  reservation_prices ReservationPrice[]

  order_id Int
  order    Order @relation(fields: [order_id], references: [id])

  @@map("order_reservations")
}

model ReservationPrice {
  id             Int    @id @default(autoincrement())
  price_type     String
  base_price     Float
  current_price  Float
  amount_persons Int
  category_title String @default("Unknown Title")

  order_reservation_id Int
  order_reservation    OrderReservation @relation(fields: [order_reservation_id], references: [id])

  @@map("reservation_prices")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  PROCESSING
  RETURNED
}

enum NotificationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  CANCELLED
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  INSTALLMENT_PAYMENT
}
