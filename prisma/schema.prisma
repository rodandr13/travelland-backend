generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?
  last_login    DateTime?
  email         String    @unique
  first_name    String?
  last_name     String?
  phone_number  String?
  date_of_birth DateTime?
  password_hash String
  is_active     Boolean   @default(true)
  is_admin      Boolean   @default(false)
  sessions      Session[]

  agency_id               Int?
  agency                  Agency?        @relation(fields: [agency_id], references: [id])
  orders                  Order[]
  roles                   UserRole[]
  order_histories         OrderHistory[]
  order_histories_changed OrderHistory[] @relation("OrderHistoryChangedBy")
  carts                   Cart[]
  Payment                 Payment[]

  @@index([email])
  @@map("users")
}

model Agency {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?
  name        String
  description String?
  users       User[]

  @@map("agencies")
}

model Session {
  id            Int      @id @default(autoincrement())
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  expires_at    DateTime
  refresh_token String   @unique
  user_id       Int
  user          User     @relation(fields: [user_id], references: [id])
  is_active     Boolean  @default(true)
  ip_address    String?
  user_agent    String?

  @@map("sessions")
}

model UserRole {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  role_id Int
  role    Role @relation(fields: [role_id], references: [id])

  @@id([user_id, role_id])
  @@map("user_roles")
}

model Role {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  name        RoleName @unique
  description String?

  users            UserRole[]
  role_permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  name        String   @unique
  description String?

  role_permissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  role_id Int
  role    Role @relation(fields: [role_id], references: [id])

  permission_id Int
  permission    Permission @relation(fields: [permission_id], references: [id])

  @@id([role_id, permission_id])
  @@map("role_permissions")
}

model Order {
  id           Int       @id @default(autoincrement())
  order_number String    @unique
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  confirmed_at DateTime?
  paid_at      DateTime?
  cancelled_at DateTime?
  completed_at DateTime?
  deleted_at   DateTime?

  order_status    OrderStatus
  email_status    NotificationStatus
  telegram_status NotificationStatus
  payment_method  PaymentMethod?

  cancellation_reason String?
  comments            String?

  discount_amount Decimal   @db.Decimal(10, 2)
  currency        Currency  @default(EUR)
  due_date        DateTime?

  total_base_price    Decimal @db.Decimal(10, 2)
  total_current_price Decimal @db.Decimal(10, 2)

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  promo_code_id String?
  promo_code    PromoCode? @relation(fields: [promo_code_id], references: [code])

  order_services  OrderServices[]
  payments        Payment[]
  order_histories OrderHistory[]

  @@index([order_status])
  @@index([user_id])
  @@map("orders")
}

model OrderServices {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  service_id    String
  service_type  ServiceType
  service_title String
  date          DateTime
  time          String
  slug          String?
  image_src     String?
  image_lqip    String?

  total_base_price    Decimal @db.Decimal(10, 2)
  total_current_price Decimal @db.Decimal(10, 2)

  service_prices OrderServicePrice[]

  order_id Int
  order    Order @relation(fields: [order_id], references: [id])

  @@index([service_id, service_type])
  @@map("order_services")
}

model OrderHistory {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  order_id   Int
  order      Order    @relation(fields: [order_id], references: [id])

  status          OrderStatus
  previous_status OrderStatus
  changed_at      DateTime    @default(now())
  changed_by      Int
  changed_by_user User        @relation("OrderHistoryChangedBy", fields: [changed_by], references: [id])
  user            User?       @relation(fields: [user_id], references: [id])
  user_id         Int?

  @@map("order_histories")
}

model OrderServicePrice {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  price_type     String
  base_price     Decimal  @db.Decimal(10, 2)
  current_price  Decimal  @db.Decimal(10, 2)
  quantity       Int
  category_title String

  total_base_price    Decimal @db.Decimal(10, 2)
  total_current_price Decimal @db.Decimal(10, 2)

  order_service_id Int
  order_service    OrderServices @relation(fields: [order_service_id], references: [id])

  @@map("order_service_prices")
}

model Payment {
  id             Int       @id @default(autoincrement())
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?
  order_id       Int
  transaction_id Int       @unique @default(autoincrement())
  token          String?   @unique @default(cuid())
  prcode         String?
  srcode         String?
  result_text    String?
  order          Order     @relation(fields: [order_id], references: [id])
  user_id        Int
  user           User      @relation(fields: [user_id], references: [id])

  amount Decimal       @db.Decimal(10, 2)
  status PaymentStatus @default(UNPAID)

  @@index([order_id, status])
  @@map("payments")
}

model PromoCode {
  code       String    @id
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  discount   Decimal   @db.Decimal(10, 2)
  expires_at DateTime
  is_active  Boolean   @default(true)
  orders     Order[]

  @@map("promo_codes")
}

model Cart {
  id               Int        @id @default(autoincrement())
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  deleted_at       DateTime?
  status           CartStatus @default(ACTIVE)
  user_id          Int?
  guest_session_id String?
  user             User?      @relation(fields: [user_id], references: [id])
  cart_items       CartItem[]

  @@index([user_id])
  @@index([guest_session_id])
  @@map("carts")
}

model CartItem {
  id                Int              @id @default(autoincrement())
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  service_id        String
  service_type      ServiceType
  date              DateTime
  time              String
  cart_id           Int
  cart              Cart             @relation(fields: [cart_id], references: [id])
  cart_item_options CartItemOption[]

  @@unique([cart_id, service_id, service_type, date, time])
  @@index([service_id, service_type])
  @@map("cart_items")
}

model CartItemOption {
  id           Int      @id @default(autoincrement())
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  price_type   String
  quantity     Int
  cart_item_id Int
  cart_item    CartItem @relation(fields: [cart_item_id], references: [id])

  @@map("cart_item_options")
}

model SystemSettings {
  id          Int              @id @default(autoincrement())
  key         String           @unique
  value       String
  description String?
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  value_type  SettingValueType

  @@map("system_settings")
}

enum RoleName {
  ADMIN
  USER
  GUEST
  AGENCY_USER
}

enum OrderStatus {
  CONFIRMED
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum NotificationStatus {
  NOT_SENT
  SENT
  FAILED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  INSTALLMENT_PAYMENT
}

enum Currency {
  USD
  EUR
  GBP
  RUB
}

enum ServiceType {
  TOUR
  TRANSFER
  EXCURSION
}

enum BookingStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  EXPIRED
}

enum SettingValueType {
  STRING
  INTEGER
  FLOAT
  BOOLEAN
  JSON
}

enum CartStatus {
  ACTIVE
  ORDERED
  ABANDONED
  EXPIRED
}
